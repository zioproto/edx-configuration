heat_template_version: 2013-05-23

description: >
  HOT template for an edX app server.

parameters:
  name:
    type: string
    description: Name of the VM
  image:
    type: string
    description: Image ID or name
    default: ubuntu-12.04-server-cloudimg
  flavor:
    type: string
    description: Flavor to use for app servers
    default: m1.large
  pool_id:
    type: string
    description: Pool to contact
  protocol_port:
    type: number
    description: Protocol port
  metadata:
    type: json
  network:
    type: string
    description: Network used by the server
  security_group:
    type: string
    description: Security group used by the server
  key_name:
    type: string
    description: keypair for authentication

resources:
  app_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        apt_sources:
          - source: "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu precise main"
            keyid: BA9EF27F
        package_update: true
        package_upgrade: true
        packages:
          - build-essential
          - software-properties-common
          - curl
          - git-core
          - libxml2-dev
          - libxslt1-dev
          - python-pip
          - python-apt
          - python-dev
          - libmysqlclient-dev
          - libxmlsec1-dev
          - libfreetype6-dev
          - swig
          - gcc-4.8
          - g++-4.8
        runcmd:
          - /usr/bin/pip install --upgrade pip && /usr/local/bin/pip install --upgrade setuptools && /usr/local/bin/pip install --upgrade virtualenv
          - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
          - update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      metadata: { get_param: metadata }
      user_data: { get_resource: app_cloud_config }
      user_data_format: RAW
      networks: [ { network: { get_param: network } } ]
      security_groups: [ { get_param: security_group } ]
  member:
    type: OS::Neutron::PoolMember
    properties:
      pool_id: { get_param: pool_id }
      address: { get_attr: [ server, first_address ] }
      protocol_port: { get_param: protocol_port }

outputs:
  server_ip:
    description: IP Address of the load-balanced server.
    value: { get_attr: [ server, first_address ] }
  lb_member:
    description: LB member details.
    value: { get_attr: [ member, show ] }
